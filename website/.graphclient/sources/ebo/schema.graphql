schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type ChangePermissionsMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
  address: String!
  oldPermissions: [String!]!
  newPermissions: [String!]!
}

input ChangePermissionsMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  address: String
  address_not: String
  address_gt: String
  address_lt: String
  address_gte: String
  address_lte: String
  address_in: [String!]
  address_not_in: [String!]
  address_contains: String
  address_contains_nocase: String
  address_not_contains: String
  address_not_contains_nocase: String
  address_starts_with: String
  address_starts_with_nocase: String
  address_not_starts_with: String
  address_not_starts_with_nocase: String
  address_ends_with: String
  address_ends_with_nocase: String
  address_not_ends_with: String
  address_not_ends_with_nocase: String
  oldPermissions: [String!]
  oldPermissions_not: [String!]
  oldPermissions_contains: [String!]
  oldPermissions_contains_nocase: [String!]
  oldPermissions_not_contains: [String!]
  oldPermissions_not_contains_nocase: [String!]
  newPermissions: [String!]
  newPermissions_not: [String!]
  newPermissions_contains: [String!]
  newPermissions_contains_nocase: [String!]
  newPermissions_not_contains: [String!]
  newPermissions_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ChangePermissionsMessage_filter]
  or: [ChangePermissionsMessage_filter]
}

enum ChangePermissionsMessage_orderBy {
  id
  block
  block__id
  block__data
  data
  address
  oldPermissions
  newPermissions
}

type CorrectEpochsMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
}

input CorrectEpochsMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CorrectEpochsMessage_filter]
  or: [CorrectEpochsMessage_filter]
}

enum CorrectEpochsMessage_orderBy {
  id
  block
  block__id
  block__data
  data
}

type Epoch {
  id: ID!
  epochNumber: BigInt!
  blockNumbers(skip: Int = 0, first: Int = 100, orderBy: NetworkEpochBlockNumber_orderBy, orderDirection: OrderDirection, where: NetworkEpochBlockNumber_filter): [NetworkEpochBlockNumber!]!
}

input Epoch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  epochNumber: BigInt
  epochNumber_not: BigInt
  epochNumber_gt: BigInt
  epochNumber_lt: BigInt
  epochNumber_gte: BigInt
  epochNumber_lte: BigInt
  epochNumber_in: [BigInt!]
  epochNumber_not_in: [BigInt!]
  blockNumbers_: NetworkEpochBlockNumber_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Epoch_filter]
  or: [Epoch_filter]
}

enum Epoch_orderBy {
  id
  epochNumber
  blockNumbers
}

type GlobalState {
  id: ID!
  networkCount: Int!
  activeNetworkCount: Int!
  networkArrayHead: Network
  latestValidEpoch: Epoch
  networks(skip: Int = 0, first: Int = 100, orderBy: Network_orderBy, orderDirection: OrderDirection, where: Network_filter): [Network!]!
  encodingVersion: Int!
  permissionList(skip: Int = 0, first: Int = 100, orderBy: PermissionListEntry_orderBy, orderDirection: OrderDirection, where: PermissionListEntry_filter): [PermissionListEntry!]!
}

input GlobalState_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  networkCount: Int
  networkCount_not: Int
  networkCount_gt: Int
  networkCount_lt: Int
  networkCount_gte: Int
  networkCount_lte: Int
  networkCount_in: [Int!]
  networkCount_not_in: [Int!]
  activeNetworkCount: Int
  activeNetworkCount_not: Int
  activeNetworkCount_gt: Int
  activeNetworkCount_lt: Int
  activeNetworkCount_gte: Int
  activeNetworkCount_lte: Int
  activeNetworkCount_in: [Int!]
  activeNetworkCount_not_in: [Int!]
  networkArrayHead: String
  networkArrayHead_not: String
  networkArrayHead_gt: String
  networkArrayHead_lt: String
  networkArrayHead_gte: String
  networkArrayHead_lte: String
  networkArrayHead_in: [String!]
  networkArrayHead_not_in: [String!]
  networkArrayHead_contains: String
  networkArrayHead_contains_nocase: String
  networkArrayHead_not_contains: String
  networkArrayHead_not_contains_nocase: String
  networkArrayHead_starts_with: String
  networkArrayHead_starts_with_nocase: String
  networkArrayHead_not_starts_with: String
  networkArrayHead_not_starts_with_nocase: String
  networkArrayHead_ends_with: String
  networkArrayHead_ends_with_nocase: String
  networkArrayHead_not_ends_with: String
  networkArrayHead_not_ends_with_nocase: String
  networkArrayHead_: Network_filter
  latestValidEpoch: String
  latestValidEpoch_not: String
  latestValidEpoch_gt: String
  latestValidEpoch_lt: String
  latestValidEpoch_gte: String
  latestValidEpoch_lte: String
  latestValidEpoch_in: [String!]
  latestValidEpoch_not_in: [String!]
  latestValidEpoch_contains: String
  latestValidEpoch_contains_nocase: String
  latestValidEpoch_not_contains: String
  latestValidEpoch_not_contains_nocase: String
  latestValidEpoch_starts_with: String
  latestValidEpoch_starts_with_nocase: String
  latestValidEpoch_not_starts_with: String
  latestValidEpoch_not_starts_with_nocase: String
  latestValidEpoch_ends_with: String
  latestValidEpoch_ends_with_nocase: String
  latestValidEpoch_not_ends_with: String
  latestValidEpoch_not_ends_with_nocase: String
  latestValidEpoch_: Epoch_filter
  networks_: Network_filter
  encodingVersion: Int
  encodingVersion_not: Int
  encodingVersion_gt: Int
  encodingVersion_lt: Int
  encodingVersion_gte: Int
  encodingVersion_lte: Int
  encodingVersion_in: [Int!]
  encodingVersion_not_in: [Int!]
  permissionList: [String!]
  permissionList_not: [String!]
  permissionList_contains: [String!]
  permissionList_contains_nocase: [String!]
  permissionList_not_contains: [String!]
  permissionList_not_contains_nocase: [String!]
  permissionList_: PermissionListEntry_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GlobalState_filter]
  or: [GlobalState_filter]
}

enum GlobalState_orderBy {
  id
  networkCount
  activeNetworkCount
  networkArrayHead
  networkArrayHead__id
  networkArrayHead__arrayIndex
  latestValidEpoch
  latestValidEpoch__id
  latestValidEpoch__epochNumber
  networks
  encodingVersion
  permissionList
}

"""
8 bytes signed integer

"""
scalar Int8

interface Message {
  id: ID!
  block: MessageBlock!
  """data is optional since it might be an empty message"""
  data: Bytes
}

type MessageBlock {
  id: ID!
  data: Bytes!
  payload: Payload!
  messages(skip: Int = 0, first: Int = 100, orderBy: Message_orderBy, orderDirection: OrderDirection, where: Message_filter): [Message!]!
}

input MessageBlock_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  payload: String
  payload_not: String
  payload_gt: String
  payload_lt: String
  payload_gte: String
  payload_lte: String
  payload_in: [String!]
  payload_not_in: [String!]
  payload_contains: String
  payload_contains_nocase: String
  payload_not_contains: String
  payload_not_contains_nocase: String
  payload_starts_with: String
  payload_starts_with_nocase: String
  payload_not_starts_with: String
  payload_not_starts_with_nocase: String
  payload_ends_with: String
  payload_ends_with_nocase: String
  payload_not_ends_with: String
  payload_not_ends_with_nocase: String
  payload_: Payload_filter
  messages_: Message_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [MessageBlock_filter]
  or: [MessageBlock_filter]
}

enum MessageBlock_orderBy {
  id
  data
  payload
  payload__id
  payload__data
  payload__submitter
  payload__valid
  payload__createdAt
  payload__errorMessage
  messages
}

input Message_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Message_filter]
  or: [Message_filter]
}

enum Message_orderBy {
  id
  block
  block__id
  block__data
  data
}

type Network {
  id: ID!
  addedAt: Message!
  lastUpdatedAt: Message!
  removedAt: Message
  blockNumbers(skip: Int = 0, first: Int = 100, orderBy: NetworkEpochBlockNumber_orderBy, orderDirection: OrderDirection, where: NetworkEpochBlockNumber_filter): [NetworkEpochBlockNumber!]!
  """
  Next element on the linked-list implementation for networks. Used for list recreation
  """
  nextArrayElement: Network
  """Index number on the linked list"""
  arrayIndex: Int
  state: GlobalState
  latestValidBlockNumber: NetworkEpochBlockNumber
}

type NetworkEpochBlockNumber {
  id: ID!
  acceleration: BigInt!
  delta: BigInt!
  blockNumber: BigInt!
  epochNumber: BigInt!
  network: Network!
  epoch: Epoch!
  """Entity used for calculations. Null if it's the first"""
  previousBlockNumber: NetworkEpochBlockNumber
}

input NetworkEpochBlockNumber_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  acceleration: BigInt
  acceleration_not: BigInt
  acceleration_gt: BigInt
  acceleration_lt: BigInt
  acceleration_gte: BigInt
  acceleration_lte: BigInt
  acceleration_in: [BigInt!]
  acceleration_not_in: [BigInt!]
  delta: BigInt
  delta_not: BigInt
  delta_gt: BigInt
  delta_lt: BigInt
  delta_gte: BigInt
  delta_lte: BigInt
  delta_in: [BigInt!]
  delta_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  epochNumber: BigInt
  epochNumber_not: BigInt
  epochNumber_gt: BigInt
  epochNumber_lt: BigInt
  epochNumber_gte: BigInt
  epochNumber_lte: BigInt
  epochNumber_in: [BigInt!]
  epochNumber_not_in: [BigInt!]
  network: String
  network_not: String
  network_gt: String
  network_lt: String
  network_gte: String
  network_lte: String
  network_in: [String!]
  network_not_in: [String!]
  network_contains: String
  network_contains_nocase: String
  network_not_contains: String
  network_not_contains_nocase: String
  network_starts_with: String
  network_starts_with_nocase: String
  network_not_starts_with: String
  network_not_starts_with_nocase: String
  network_ends_with: String
  network_ends_with_nocase: String
  network_not_ends_with: String
  network_not_ends_with_nocase: String
  network_: Network_filter
  epoch: String
  epoch_not: String
  epoch_gt: String
  epoch_lt: String
  epoch_gte: String
  epoch_lte: String
  epoch_in: [String!]
  epoch_not_in: [String!]
  epoch_contains: String
  epoch_contains_nocase: String
  epoch_not_contains: String
  epoch_not_contains_nocase: String
  epoch_starts_with: String
  epoch_starts_with_nocase: String
  epoch_not_starts_with: String
  epoch_not_starts_with_nocase: String
  epoch_ends_with: String
  epoch_ends_with_nocase: String
  epoch_not_ends_with: String
  epoch_not_ends_with_nocase: String
  epoch_: Epoch_filter
  previousBlockNumber: String
  previousBlockNumber_not: String
  previousBlockNumber_gt: String
  previousBlockNumber_lt: String
  previousBlockNumber_gte: String
  previousBlockNumber_lte: String
  previousBlockNumber_in: [String!]
  previousBlockNumber_not_in: [String!]
  previousBlockNumber_contains: String
  previousBlockNumber_contains_nocase: String
  previousBlockNumber_not_contains: String
  previousBlockNumber_not_contains_nocase: String
  previousBlockNumber_starts_with: String
  previousBlockNumber_starts_with_nocase: String
  previousBlockNumber_not_starts_with: String
  previousBlockNumber_not_starts_with_nocase: String
  previousBlockNumber_ends_with: String
  previousBlockNumber_ends_with_nocase: String
  previousBlockNumber_not_ends_with: String
  previousBlockNumber_not_ends_with_nocase: String
  previousBlockNumber_: NetworkEpochBlockNumber_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NetworkEpochBlockNumber_filter]
  or: [NetworkEpochBlockNumber_filter]
}

enum NetworkEpochBlockNumber_orderBy {
  id
  acceleration
  delta
  blockNumber
  epochNumber
  network
  network__id
  network__arrayIndex
  epoch
  epoch__id
  epoch__epochNumber
  previousBlockNumber
  previousBlockNumber__id
  previousBlockNumber__acceleration
  previousBlockNumber__delta
  previousBlockNumber__blockNumber
  previousBlockNumber__epochNumber
}

input Network_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  addedAt: String
  addedAt_not: String
  addedAt_gt: String
  addedAt_lt: String
  addedAt_gte: String
  addedAt_lte: String
  addedAt_in: [String!]
  addedAt_not_in: [String!]
  addedAt_contains: String
  addedAt_contains_nocase: String
  addedAt_not_contains: String
  addedAt_not_contains_nocase: String
  addedAt_starts_with: String
  addedAt_starts_with_nocase: String
  addedAt_not_starts_with: String
  addedAt_not_starts_with_nocase: String
  addedAt_ends_with: String
  addedAt_ends_with_nocase: String
  addedAt_not_ends_with: String
  addedAt_not_ends_with_nocase: String
  addedAt_: Message_filter
  lastUpdatedAt: String
  lastUpdatedAt_not: String
  lastUpdatedAt_gt: String
  lastUpdatedAt_lt: String
  lastUpdatedAt_gte: String
  lastUpdatedAt_lte: String
  lastUpdatedAt_in: [String!]
  lastUpdatedAt_not_in: [String!]
  lastUpdatedAt_contains: String
  lastUpdatedAt_contains_nocase: String
  lastUpdatedAt_not_contains: String
  lastUpdatedAt_not_contains_nocase: String
  lastUpdatedAt_starts_with: String
  lastUpdatedAt_starts_with_nocase: String
  lastUpdatedAt_not_starts_with: String
  lastUpdatedAt_not_starts_with_nocase: String
  lastUpdatedAt_ends_with: String
  lastUpdatedAt_ends_with_nocase: String
  lastUpdatedAt_not_ends_with: String
  lastUpdatedAt_not_ends_with_nocase: String
  lastUpdatedAt_: Message_filter
  removedAt: String
  removedAt_not: String
  removedAt_gt: String
  removedAt_lt: String
  removedAt_gte: String
  removedAt_lte: String
  removedAt_in: [String!]
  removedAt_not_in: [String!]
  removedAt_contains: String
  removedAt_contains_nocase: String
  removedAt_not_contains: String
  removedAt_not_contains_nocase: String
  removedAt_starts_with: String
  removedAt_starts_with_nocase: String
  removedAt_not_starts_with: String
  removedAt_not_starts_with_nocase: String
  removedAt_ends_with: String
  removedAt_ends_with_nocase: String
  removedAt_not_ends_with: String
  removedAt_not_ends_with_nocase: String
  removedAt_: Message_filter
  blockNumbers_: NetworkEpochBlockNumber_filter
  nextArrayElement: String
  nextArrayElement_not: String
  nextArrayElement_gt: String
  nextArrayElement_lt: String
  nextArrayElement_gte: String
  nextArrayElement_lte: String
  nextArrayElement_in: [String!]
  nextArrayElement_not_in: [String!]
  nextArrayElement_contains: String
  nextArrayElement_contains_nocase: String
  nextArrayElement_not_contains: String
  nextArrayElement_not_contains_nocase: String
  nextArrayElement_starts_with: String
  nextArrayElement_starts_with_nocase: String
  nextArrayElement_not_starts_with: String
  nextArrayElement_not_starts_with_nocase: String
  nextArrayElement_ends_with: String
  nextArrayElement_ends_with_nocase: String
  nextArrayElement_not_ends_with: String
  nextArrayElement_not_ends_with_nocase: String
  nextArrayElement_: Network_filter
  arrayIndex: Int
  arrayIndex_not: Int
  arrayIndex_gt: Int
  arrayIndex_lt: Int
  arrayIndex_gte: Int
  arrayIndex_lte: Int
  arrayIndex_in: [Int!]
  arrayIndex_not_in: [Int!]
  state: String
  state_not: String
  state_gt: String
  state_lt: String
  state_gte: String
  state_lte: String
  state_in: [String!]
  state_not_in: [String!]
  state_contains: String
  state_contains_nocase: String
  state_not_contains: String
  state_not_contains_nocase: String
  state_starts_with: String
  state_starts_with_nocase: String
  state_not_starts_with: String
  state_not_starts_with_nocase: String
  state_ends_with: String
  state_ends_with_nocase: String
  state_not_ends_with: String
  state_not_ends_with_nocase: String
  state_: GlobalState_filter
  latestValidBlockNumber: String
  latestValidBlockNumber_not: String
  latestValidBlockNumber_gt: String
  latestValidBlockNumber_lt: String
  latestValidBlockNumber_gte: String
  latestValidBlockNumber_lte: String
  latestValidBlockNumber_in: [String!]
  latestValidBlockNumber_not_in: [String!]
  latestValidBlockNumber_contains: String
  latestValidBlockNumber_contains_nocase: String
  latestValidBlockNumber_not_contains: String
  latestValidBlockNumber_not_contains_nocase: String
  latestValidBlockNumber_starts_with: String
  latestValidBlockNumber_starts_with_nocase: String
  latestValidBlockNumber_not_starts_with: String
  latestValidBlockNumber_not_starts_with_nocase: String
  latestValidBlockNumber_ends_with: String
  latestValidBlockNumber_ends_with_nocase: String
  latestValidBlockNumber_not_ends_with: String
  latestValidBlockNumber_not_ends_with_nocase: String
  latestValidBlockNumber_: NetworkEpochBlockNumber_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Network_filter]
  or: [Network_filter]
}

enum Network_orderBy {
  id
  addedAt
  addedAt__id
  addedAt__data
  lastUpdatedAt
  lastUpdatedAt__id
  lastUpdatedAt__data
  removedAt
  removedAt__id
  removedAt__data
  blockNumbers
  nextArrayElement
  nextArrayElement__id
  nextArrayElement__arrayIndex
  arrayIndex
  state
  state__id
  state__networkCount
  state__activeNetworkCount
  state__encodingVersion
  latestValidBlockNumber
  latestValidBlockNumber__id
  latestValidBlockNumber__acceleration
  latestValidBlockNumber__delta
  latestValidBlockNumber__blockNumber
  latestValidBlockNumber__epochNumber
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Payload {
  id: ID!
  data: Bytes!
  submitter: String!
  valid: Boolean!
  """Block number where this payload was created at"""
  createdAt: BigInt!
  """
  Optional error message in case the payload is invalid. Useful for debugging purposes
  """
  errorMessage: String
  messageBlocks(skip: Int = 0, first: Int = 100, orderBy: MessageBlock_orderBy, orderDirection: OrderDirection, where: MessageBlock_filter): [MessageBlock!]!
}

input Payload_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  submitter: String
  submitter_not: String
  submitter_gt: String
  submitter_lt: String
  submitter_gte: String
  submitter_lte: String
  submitter_in: [String!]
  submitter_not_in: [String!]
  submitter_contains: String
  submitter_contains_nocase: String
  submitter_not_contains: String
  submitter_not_contains_nocase: String
  submitter_starts_with: String
  submitter_starts_with_nocase: String
  submitter_not_starts_with: String
  submitter_not_starts_with_nocase: String
  submitter_ends_with: String
  submitter_ends_with_nocase: String
  submitter_not_ends_with: String
  submitter_not_ends_with_nocase: String
  valid: Boolean
  valid_not: Boolean
  valid_in: [Boolean!]
  valid_not_in: [Boolean!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  errorMessage: String
  errorMessage_not: String
  errorMessage_gt: String
  errorMessage_lt: String
  errorMessage_gte: String
  errorMessage_lte: String
  errorMessage_in: [String!]
  errorMessage_not_in: [String!]
  errorMessage_contains: String
  errorMessage_contains_nocase: String
  errorMessage_not_contains: String
  errorMessage_not_contains_nocase: String
  errorMessage_starts_with: String
  errorMessage_starts_with_nocase: String
  errorMessage_not_starts_with: String
  errorMessage_not_starts_with_nocase: String
  errorMessage_ends_with: String
  errorMessage_ends_with_nocase: String
  errorMessage_not_ends_with: String
  errorMessage_not_ends_with_nocase: String
  messageBlocks_: MessageBlock_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Payload_filter]
  or: [Payload_filter]
}

enum Payload_orderBy {
  id
  data
  submitter
  valid
  createdAt
  errorMessage
  messageBlocks
}

type PermissionListEntry {
  id: ID!
  permissions: [String!]!
  validThrough: BigInt!
}

input PermissionListEntry_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  permissions: [String!]
  permissions_not: [String!]
  permissions_contains: [String!]
  permissions_contains_nocase: [String!]
  permissions_not_contains: [String!]
  permissions_not_contains_nocase: [String!]
  validThrough: BigInt
  validThrough_not: BigInt
  validThrough_gt: BigInt
  validThrough_lt: BigInt
  validThrough_gte: BigInt
  validThrough_lte: BigInt
  validThrough_in: [BigInt!]
  validThrough_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PermissionListEntry_filter]
  or: [PermissionListEntry_filter]
}

enum PermissionListEntry_orderBy {
  id
  permissions
  validThrough
}

type Query {
  payload(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payload
  payloads(
    skip: Int = 0
    first: Int = 100
    orderBy: Payload_orderBy
    orderDirection: OrderDirection
    where: Payload_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payload!]!
  messageBlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MessageBlock
  messageBlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: MessageBlock_orderBy
    orderDirection: OrderDirection
    where: MessageBlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MessageBlock!]!
  setBlockNumbersForEpochMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetBlockNumbersForEpochMessage
  setBlockNumbersForEpochMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: SetBlockNumbersForEpochMessage_orderBy
    orderDirection: OrderDirection
    where: SetBlockNumbersForEpochMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetBlockNumbersForEpochMessage!]!
  correctEpochsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CorrectEpochsMessage
  correctEpochsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: CorrectEpochsMessage_orderBy
    orderDirection: OrderDirection
    where: CorrectEpochsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CorrectEpochsMessage!]!
  updateVersionsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateVersionsMessage
  updateVersionsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateVersionsMessage_orderBy
    orderDirection: OrderDirection
    where: UpdateVersionsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateVersionsMessage!]!
  changePermissionsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChangePermissionsMessage
  changePermissionsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: ChangePermissionsMessage_orderBy
    orderDirection: OrderDirection
    where: ChangePermissionsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChangePermissionsMessage!]!
  resetStateMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ResetStateMessage
  resetStateMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: ResetStateMessage_orderBy
    orderDirection: OrderDirection
    where: ResetStateMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ResetStateMessage!]!
  registerNetworksMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisterNetworksMessage
  registerNetworksMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisterNetworksMessage_orderBy
    orderDirection: OrderDirection
    where: RegisterNetworksMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisterNetworksMessage!]!
  network(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Network
  networks(
    skip: Int = 0
    first: Int = 100
    orderBy: Network_orderBy
    orderDirection: OrderDirection
    where: Network_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Network!]!
  globalState(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalState
  globalStates(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalState_orderBy
    orderDirection: OrderDirection
    where: GlobalState_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalState!]!
  permissionListEntry(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermissionListEntry
  permissionListEntries(
    skip: Int = 0
    first: Int = 100
    orderBy: PermissionListEntry_orderBy
    orderDirection: OrderDirection
    where: PermissionListEntry_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermissionListEntry!]!
  epoch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Epoch
  epoches(
    skip: Int = 0
    first: Int = 100
    orderBy: Epoch_orderBy
    orderDirection: OrderDirection
    where: Epoch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Epoch!]!
  networkEpochBlockNumber(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NetworkEpochBlockNumber
  networkEpochBlockNumbers(
    skip: Int = 0
    first: Int = 100
    orderBy: NetworkEpochBlockNumber_orderBy
    orderDirection: OrderDirection
    where: NetworkEpochBlockNumber_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NetworkEpochBlockNumber!]!
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RegisterNetworksMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
  removeCount: BigInt!
  addCount: BigInt!
}

input RegisterNetworksMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  removeCount: BigInt
  removeCount_not: BigInt
  removeCount_gt: BigInt
  removeCount_lt: BigInt
  removeCount_gte: BigInt
  removeCount_lte: BigInt
  removeCount_in: [BigInt!]
  removeCount_not_in: [BigInt!]
  addCount: BigInt
  addCount_not: BigInt
  addCount_gt: BigInt
  addCount_lt: BigInt
  addCount_gte: BigInt
  addCount_lte: BigInt
  addCount_in: [BigInt!]
  addCount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegisterNetworksMessage_filter]
  or: [RegisterNetworksMessage_filter]
}

enum RegisterNetworksMessage_orderBy {
  id
  block
  block__id
  block__data
  data
  removeCount
  addCount
}

type ResetStateMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
}

input ResetStateMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ResetStateMessage_filter]
  or: [ResetStateMessage_filter]
}

enum ResetStateMessage_orderBy {
  id
  block
  block__id
  block__data
  data
}

type SetBlockNumbersForEpochMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
  merkleRoot: Bytes
  accelerations: [BigInt!]
  count: BigInt
}

input SetBlockNumbersForEpochMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  merkleRoot: Bytes
  merkleRoot_not: Bytes
  merkleRoot_gt: Bytes
  merkleRoot_lt: Bytes
  merkleRoot_gte: Bytes
  merkleRoot_lte: Bytes
  merkleRoot_in: [Bytes!]
  merkleRoot_not_in: [Bytes!]
  merkleRoot_contains: Bytes
  merkleRoot_not_contains: Bytes
  accelerations: [BigInt!]
  accelerations_not: [BigInt!]
  accelerations_contains: [BigInt!]
  accelerations_contains_nocase: [BigInt!]
  accelerations_not_contains: [BigInt!]
  accelerations_not_contains_nocase: [BigInt!]
  count: BigInt
  count_not: BigInt
  count_gt: BigInt
  count_lt: BigInt
  count_gte: BigInt
  count_lte: BigInt
  count_in: [BigInt!]
  count_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SetBlockNumbersForEpochMessage_filter]
  or: [SetBlockNumbersForEpochMessage_filter]
}

enum SetBlockNumbersForEpochMessage_orderBy {
  id
  block
  block__id
  block__data
  data
  merkleRoot
  accelerations
  count
}

type Subscription {
  payload(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Payload
  payloads(
    skip: Int = 0
    first: Int = 100
    orderBy: Payload_orderBy
    orderDirection: OrderDirection
    where: Payload_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Payload!]!
  messageBlock(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): MessageBlock
  messageBlocks(
    skip: Int = 0
    first: Int = 100
    orderBy: MessageBlock_orderBy
    orderDirection: OrderDirection
    where: MessageBlock_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [MessageBlock!]!
  setBlockNumbersForEpochMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetBlockNumbersForEpochMessage
  setBlockNumbersForEpochMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: SetBlockNumbersForEpochMessage_orderBy
    orderDirection: OrderDirection
    where: SetBlockNumbersForEpochMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetBlockNumbersForEpochMessage!]!
  correctEpochsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CorrectEpochsMessage
  correctEpochsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: CorrectEpochsMessage_orderBy
    orderDirection: OrderDirection
    where: CorrectEpochsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CorrectEpochsMessage!]!
  updateVersionsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): UpdateVersionsMessage
  updateVersionsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: UpdateVersionsMessage_orderBy
    orderDirection: OrderDirection
    where: UpdateVersionsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [UpdateVersionsMessage!]!
  changePermissionsMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ChangePermissionsMessage
  changePermissionsMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: ChangePermissionsMessage_orderBy
    orderDirection: OrderDirection
    where: ChangePermissionsMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ChangePermissionsMessage!]!
  resetStateMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ResetStateMessage
  resetStateMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: ResetStateMessage_orderBy
    orderDirection: OrderDirection
    where: ResetStateMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ResetStateMessage!]!
  registerNetworksMessage(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegisterNetworksMessage
  registerNetworksMessages(
    skip: Int = 0
    first: Int = 100
    orderBy: RegisterNetworksMessage_orderBy
    orderDirection: OrderDirection
    where: RegisterNetworksMessage_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegisterNetworksMessage!]!
  network(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Network
  networks(
    skip: Int = 0
    first: Int = 100
    orderBy: Network_orderBy
    orderDirection: OrderDirection
    where: Network_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Network!]!
  globalState(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GlobalState
  globalStates(
    skip: Int = 0
    first: Int = 100
    orderBy: GlobalState_orderBy
    orderDirection: OrderDirection
    where: GlobalState_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GlobalState!]!
  permissionListEntry(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PermissionListEntry
  permissionListEntries(
    skip: Int = 0
    first: Int = 100
    orderBy: PermissionListEntry_orderBy
    orderDirection: OrderDirection
    where: PermissionListEntry_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PermissionListEntry!]!
  epoch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Epoch
  epoches(
    skip: Int = 0
    first: Int = 100
    orderBy: Epoch_orderBy
    orderDirection: OrderDirection
    where: Epoch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Epoch!]!
  networkEpochBlockNumber(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NetworkEpochBlockNumber
  networkEpochBlockNumbers(
    skip: Int = 0
    first: Int = 100
    orderBy: NetworkEpochBlockNumber_orderBy
    orderDirection: OrderDirection
    where: NetworkEpochBlockNumber_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NetworkEpochBlockNumber!]!
  message(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Message
  messages(
    skip: Int = 0
    first: Int = 100
    orderBy: Message_orderBy
    orderDirection: OrderDirection
    where: Message_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Message!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type UpdateVersionsMessage implements Message {
  id: ID!
  block: MessageBlock!
  data: Bytes
  newVersion: Int!
  oldVersion: Int!
}

input UpdateVersionsMessage_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  block: String
  block_not: String
  block_gt: String
  block_lt: String
  block_gte: String
  block_lte: String
  block_in: [String!]
  block_not_in: [String!]
  block_contains: String
  block_contains_nocase: String
  block_not_contains: String
  block_not_contains_nocase: String
  block_starts_with: String
  block_starts_with_nocase: String
  block_not_starts_with: String
  block_not_starts_with_nocase: String
  block_ends_with: String
  block_ends_with_nocase: String
  block_not_ends_with: String
  block_not_ends_with_nocase: String
  block_: MessageBlock_filter
  data: Bytes
  data_not: Bytes
  data_gt: Bytes
  data_lt: Bytes
  data_gte: Bytes
  data_lte: Bytes
  data_in: [Bytes!]
  data_not_in: [Bytes!]
  data_contains: Bytes
  data_not_contains: Bytes
  newVersion: Int
  newVersion_not: Int
  newVersion_gt: Int
  newVersion_lt: Int
  newVersion_gte: Int
  newVersion_lte: Int
  newVersion_in: [Int!]
  newVersion_not_in: [Int!]
  oldVersion: Int
  oldVersion_not: Int
  oldVersion_gt: Int
  oldVersion_lt: Int
  oldVersion_gte: Int
  oldVersion_lte: Int
  oldVersion_in: [Int!]
  oldVersion_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [UpdateVersionsMessage_filter]
  or: [UpdateVersionsMessage_filter]
}

enum UpdateVersionsMessage_orderBy {
  id
  block
  block__id
  block__data
  data
  newVersion
  oldVersion
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}