{
  "openapi": "3.1.0",
  "info": {
    "title": "Token API (Beta)",
    "description": "Power your apps & AI agents with real-time token data.",
    "version": "3.1.0+a61c748 (2025-10-16)"
  },
  "servers": [
    {
      "url": "https://token-api.thegraph.com/",
      "description": "Token API - Remote"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Api-Key"
      }
    },
    "schemas": {}
  },
  "paths": {
    "/v1/evm/balances/historical": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "decimals": {
                            "type": "number"
                          },
                          "open": {
                            "type": "number"
                          },
                          "high": {
                            "type": "number"
                          },
                          "low": {
                            "type": "number"
                          },
                          "close": {
                            "type": "number"
                          },
                          "name": {
                            "type": "string"
                          },
                          "symbol": {
                            "type": "string"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "datetime",
                          "address",
                          "contract",
                          "decimals",
                          "open",
                          "high",
                          "low",
                          "close",
                          "name",
                          "symbol",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "datetime": "2025-10-09 00:00:00",
                          "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                          "contract": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                          "open": 29.589346973619755,
                          "high": 50.783103394640676,
                          "low": 0.7830483276016842,
                          "close": 0.7841551025245886,
                          "name": "Native",
                          "symbol": "ETH",
                          "decimals": 18,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmBalancesHistorical",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address",
              "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "4h",
                "1d",
                "1w"
              ],
              "default": "1d",
              "description": "The interval for which to aggregate price data (hourly, 4-hours, daily or weekly).",
              "example": "1w"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Historical Balances",
        "description": "Returns wallet token balance changes over time in OHLCV format.\n\nOHLCV historical depth is subject to plan restrictions.",
        "x-tagGroups": [
          "Historical"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/balances/native": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "address",
                          "contract",
                          "amount",
                          "value",
                          "name",
                          "symbol",
                          "decimals",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-15 23:16:23",
                          "last_update_block_num": 23586308,
                          "last_update_timestamp": 1760570183,
                          "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                          "contract": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                          "amount": "784155102524588711",
                          "value": 0.7841551025245886,
                          "name": "Native",
                          "symbol": "ETH",
                          "decimals": 18,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmBalancesNative",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_null_balances",
            "schema": {
              "description": "Include zero/null balances in results",
              "default": false,
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Native Balances",
        "description": "Returns EVM native balances for wallet addresses.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/balances": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "address",
                          "contract",
                          "amount",
                          "value",
                          "name",
                          "symbol",
                          "decimals",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-08 07:49:47",
                          "last_update_block_num": 23531651,
                          "last_update_timestamp": 1759909787,
                          "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                          "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                          "amount": "17058407780",
                          "value": 17058.40778,
                          "name": "USD Coin",
                          "symbol": "USDC",
                          "decimals": 6,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmBalances",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "include_null_balances",
            "schema": {
              "description": "Include zero/null balances in results",
              "default": false,
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Balances",
        "description": "Returns ERC-20 token balances for a wallet address.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/dexes": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "factory": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "protocol": {
                            "description": "Protocol name",
                            "example": "uniswap_v3",
                            "type": "string",
                            "enum": [
                              "uniswap_v2",
                              "uniswap_v3",
                              "uniswap_v4"
                            ]
                          },
                          "total_uaw": {
                            "type": "number"
                          },
                          "total_transactions": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "factory",
                          "protocol",
                          "total_uaw",
                          "total_transactions"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "factory": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
                          "protocol": "uniswap_v2",
                          "total_uaw": 13529627,
                          "total_transactions": 20736917
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmDexes",
        "tags": [
          "EVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "factory",
            "schema": {
              "type": "string",
              "description": "Filter by factory address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "protocol",
            "schema": {
              "description": "Protocol name",
              "example": "uniswap_v3",
              "default": "",
              "type": "string",
              "enum": [
                "uniswap_v2",
                "uniswap_v3",
                "uniswap_v4"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Supported DEXs",
        "description": "Returns supported EVM DEXs.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/holders": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "address",
                          "contract",
                          "amount",
                          "value",
                          "name",
                          "symbol",
                          "decimals",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-16 09:08:11",
                          "last_update_block_num": 23589233,
                          "last_update_timestamp": 1760605691,
                          "address": "0x59cd1c87501baa753d0b5b5ab5d8416a45cd71db",
                          "contract": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "amount": "97590855599990900949144",
                          "value": 97590.85559999091,
                          "name": "Wrapped Ether",
                          "symbol": "WETH",
                          "decimals": 18,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmHolders",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address",
              "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Holders",
        "description": "Returns top token holders ranked by balance.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/collections": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contract_creation": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "contract_creator": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "owners": {
                            "type": "number"
                          },
                          "total_supply": {
                            "type": "number"
                          },
                          "total_unique_supply": {
                            "type": "number"
                          },
                          "total_transfers": {
                            "type": "number"
                          },
                          "network_id": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          },
                          "spam_status": {
                            "type": "string",
                            "enum": [
                              "spam",
                              "not_spam",
                              "pending",
                              "not_supported",
                              "error"
                            ]
                          }
                        },
                        "required": [
                          "contract_creation",
                          "contract_creator",
                          "contract",
                          "name",
                          "symbol",
                          "owners",
                          "total_supply",
                          "total_unique_supply",
                          "total_transfers",
                          "network_id",
                          "spam_status"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "contract_creation": "2021-07-22 12:26:01",
                          "contract_creator": "0xe9da256a28630efdc637bfd4c65f0887be1aeda8",
                          "contract": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
                          "name": "PudgyPenguins",
                          "symbol": "PPG",
                          "token_standard": "ERC721",
                          "owners": 4952,
                          "total_supply": 8888,
                          "total_unique_supply": 8888,
                          "total_transfers": 193641,
                          "network": "mainnet",
                          "spam_status": "pending"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftCollections",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "example": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
              "type": "string",
              "description": "Filter by contract address"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Collection",
        "description": "Returns NFT collection metadata, supply stats, owner count, and transfer history.\n\nThe `spam_status` flag indicates if the NFT is likely spam. If status shows `pending`, retry in a few seconds.\n\nSpam detection is supported for:\n\n* mainnet\n* base",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/holders": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token_standard": {
                            "description": "Token standard",
                            "example": "ERC721",
                            "type": "string",
                            "enum": [
                              "ERC721",
                              "ERC1155"
                            ]
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "quantity": {
                            "description": "Number of tokens held by this address",
                            "type": "number"
                          },
                          "unique_tokens": {
                            "description": "Number of unique token IDs held by this address",
                            "type": "number"
                          },
                          "percentage": {
                            "description": "Percentage of total supply held by this address",
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "contract",
                          "token_standard",
                          "address",
                          "quantity",
                          "unique_tokens",
                          "percentage",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "contract": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
                          "token_standard": "ERC721",
                          "address": "0x29469395eaf6f95920e59f858042f0e28d98a20b",
                          "quantity": 358,
                          "unique_tokens": 358,
                          "percentage": 4.027902790279028,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftHolders",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "example": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
              "type": "string",
              "description": "Filter by contract address"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Holders",
        "description": "Returns wallet addresses holding NFT collection tokens with quantity and percentage distribution.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/items": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token_id": {
                            "description": "Token ID",
                            "type": "string",
                            "example": "5712"
                          },
                          "token_standard": {
                            "description": "Token standard",
                            "example": "ERC721",
                            "type": "string",
                            "enum": [
                              "ERC721",
                              "ERC1155"
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "description": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "image": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "uri": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "attributes": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "trait_type": {
                                  "type": "string"
                                },
                                "value": {
                                  "type": "string"
                                },
                                "display_type": {
                                  "type": "string"
                                }
                              },
                              "required": [
                                "trait_type",
                                "value"
                              ],
                              "additionalProperties": false
                            }
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "address",
                          "contract",
                          "token_id",
                          "token_standard",
                          "name",
                          "description",
                          "image",
                          "uri",
                          "attributes",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "address": "0x9379557bdf32f5ee296ca7b360ccb8dcb9543d8e",
                          "contract": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
                          "token_id": "5712",
                          "token_standard": "ERC721",
                          "name": "Pudgy Penguin #5712",
                          "description": "A collection 8888 Cute Chubby Pudgy Penquins sliding around on the freezing ETH blockchain.",
                          "image": "ipfs://QmNf1UsmdGaMbpatQ6toXSkzDpizaGmC9zfunCyoz1enD5/penguin/5712.png",
                          "uri": "ipfs://bafybeibc5sgo2plmjkq2tzmhrn54bk3crhnc23zd2msg4ea7a4pxrkgfna/5712",
                          "attributes": [
                            {
                              "trait_type": "Background",
                              "value": "Blue"
                            },
                            {
                              "trait_type": "Skin",
                              "value": "Olive Green"
                            },
                            {
                              "trait_type": "Body",
                              "value": "Turtleneck Green"
                            },
                            {
                              "trait_type": "Face",
                              "value": "Scar"
                            },
                            {
                              "trait_type": "Head",
                              "value": "Party Hat"
                            }
                          ],
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftItems",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "example": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
              "type": "string",
              "description": "Filter by contract address"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "token_id",
            "schema": {
              "description": "Token ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "5712",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Items",
        "description": "Returns NFT token metadata, attributes, current owner, and media URIs.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/ownerships": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token_id": {
                            "description": "Token ID",
                            "type": "string",
                            "example": "5712"
                          },
                          "token_standard": {
                            "description": "Token standard",
                            "example": "ERC721",
                            "type": "string",
                            "enum": [
                              "ERC721",
                              "ERC1155"
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "address",
                          "contract",
                          "token_id",
                          "token_standard",
                          "name",
                          "symbol",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                          "contract": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
                          "token_id": "12",
                          "token_standard": "ERC721",
                          "name": "Bored Ape Nike Club",
                          "symbol": "BANC",
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftOwnerships",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "token_id",
            "schema": {
              "description": "Token ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "12",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "token_standard",
            "schema": {
              "description": "Token standard",
              "example": "ERC721",
              "default": "",
              "type": "string",
              "enum": [
                "ERC721",
                "ERC1155"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "include_null_balances",
            "schema": {
              "description": "Include zero/null balances in results",
              "default": false,
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Ownerships by Address",
        "description": "Returns NFT tokens owned by a wallet address with metadata and ownership information.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/sales": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "transaction_id": {
                            "type": "string",
                            "description": "Filter by transaction hash",
                            "example": "0xf6374799c227c9db38ff5ac1d5bebe8b607a1de1238cd861ebd1053ec07305ca"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token_id": {
                            "description": "Token ID",
                            "type": "string",
                            "example": "5712"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "offerer": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "recipient": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "sale_amount": {
                            "type": "number"
                          },
                          "sale_currency": {
                            "type": "string"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "transaction_id",
                          "contract",
                          "token_id",
                          "name",
                          "symbol",
                          "offerer",
                          "recipient",
                          "sale_amount",
                          "sale_currency",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 22098625,
                          "datetime": "2025-03-21 23:46:11",
                          "timestamp": 1742600771,
                          "transaction_id": "0x8cc8b83e7b7fec752bd689700156990e7ce4d6b890f7b5ab58adf2fb602a98b9",
                          "contract": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
                          "token_id": "5712",
                          "name": "PudgyPenguins",
                          "symbol": "PPG",
                          "offerer": "0x355062b5d0e324815290b96370e87607a71d613d",
                          "recipient": "0x7ccde43632b3287fda060719d802b2c4cb6f769b",
                          "sale_amount": 9.73,
                          "sale_currency": "ETH",
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftSales",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string",
              "description": "Filter by transaction hash<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x8cc8b83e7b7fec752bd689700156990e7ce4d6b890f7b5ab58adf2fb602a98b9",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "token_id",
            "schema": {
              "description": "Token ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "5712",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x355062b5d0e324815290b96370e87607a71d613d",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "from_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x355062b5d0e324815290b96370e87607a71d613d",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "to_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x7ccde43632b3287fda060719d802b2c4cb6f769b",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Sales",
        "description": "Returns NFT marketplace sales with price, buyer, seller, and transaction data.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/nft/transfers": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "@type": {
                            "description": "Transfer category",
                            "example": "TRANSFER",
                            "type": "string",
                            "enum": [
                              "BURN",
                              "MINT",
                              "TRANSFER"
                            ]
                          },
                          "transfer_type": {
                            "type": "string"
                          },
                          "transaction_id": {
                            "type": "string",
                            "description": "Filter by transaction hash",
                            "example": "0xf6374799c227c9db38ff5ac1d5bebe8b607a1de1238cd861ebd1053ec07305ca"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "token_id": {
                            "description": "Token ID",
                            "type": "string",
                            "example": "5712"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "token_standard": {
                            "description": "Token standard",
                            "example": "ERC721",
                            "type": "string",
                            "enum": [
                              "ERC721",
                              "ERC1155"
                            ]
                          },
                          "from": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "to": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "amount": {
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "@type",
                          "transfer_type",
                          "transaction_id",
                          "contract",
                          "token_id",
                          "name",
                          "symbol",
                          "token_standard",
                          "from",
                          "to",
                          "amount",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 22098625,
                          "datetime": "2025-03-21 23:46:11",
                          "timestamp": 1742600771,
                          "@type": "TRANSFER",
                          "transfer_type": "Single",
                          "transaction_id": "0x8cc8b83e7b7fec752bd689700156990e7ce4d6b890f7b5ab58adf2fb602a98b9",
                          "contract": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
                          "token_id": "5712",
                          "name": "PudgyPenguins",
                          "symbol": "PPG",
                          "token_standard": "ERC721",
                          "from": "0x355062b5d0e324815290b96370e87607a71d613d",
                          "to": "0x7ccde43632b3287fda060719d802b2c4cb6f769b",
                          "amount": 1,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmNftTransfers",
        "tags": [
          "EVM NFTs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "description": "Transfer category",
              "example": "TRANSFER",
              "default": "",
              "type": "string",
              "enum": [
                "BURN",
                "MINT",
                "TRANSFER"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string",
              "description": "Filter by transaction hash<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x8cc8b83e7b7fec752bd689700156990e7ce4d6b890f7b5ab58adf2fb602a98b9",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xbd3531da5cf5857e7cfaa92426877b022e612cf8",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "token_id",
            "schema": {
              "description": "Token ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "5712",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x355062b5d0e324815290b96370e87607a71d613d",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "from_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x355062b5d0e324815290b96370e87607a71d613d",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "to_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x7ccde43632b3287fda060719d802b2c4cb6f769b",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "NFT Transfers",
        "description": "Returns NFT transfer events including mints, burns, and ownership changes.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/pools": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "factory": {
                            "type": "string",
                            "description": "Filter by factory address",
                            "example": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f"
                          },
                          "pool": {
                            "description": "Filter by pool address",
                            "type": "string",
                            "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                          },
                          "input_token": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter by address",
                                    "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "symbol": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "decimals": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "additionalProperties": false
                          },
                          "output_token": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter by address",
                                    "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "symbol": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "decimals": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "additionalProperties": false
                          },
                          "fee": {
                            "type": "number"
                          },
                          "protocol": {
                            "description": "Protocol name",
                            "example": "uniswap_v3",
                            "type": "string",
                            "enum": [
                              "uniswap_v2",
                              "uniswap_v3",
                              "uniswap_v4"
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "factory",
                          "pool",
                          "input_token",
                          "output_token",
                          "fee",
                          "protocol",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "factory": "0x1f98431c8ad98523631ae4a59f267346ea31f984",
                          "pool": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                          "input_token": {
                            "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                            "symbol": "USDC",
                            "decimals": 6
                          },
                          "output_token": {
                            "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "symbol": "WETH",
                            "decimals": 18
                          },
                          "fee": 500,
                          "protocol": "uniswap_v3",
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmPools",
        "tags": [
          "EVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "factory",
            "schema": {
              "type": "string",
              "description": "Filter by factory address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x1f98431c8ad98523631ae4a59f267346ea31f984",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "pool",
            "schema": {
              "description": "Filter by pool address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "input_token",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "output_token",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "protocol",
            "schema": {
              "description": "Protocol name",
              "example": "uniswap_v3",
              "default": "",
              "type": "string",
              "enum": [
                "uniswap_v2",
                "uniswap_v3",
                "uniswap_v4"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Liquidity Pools",
        "description": "Returns Uniswap liquidity pool metadata including token pairs, fees, and protocol versions.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/pools/ohlc": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "ticker": {
                            "type": "string"
                          },
                          "pool": {
                            "description": "Filter by pool address",
                            "type": "string",
                            "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                          },
                          "open": {
                            "type": "number"
                          },
                          "high": {
                            "type": "number"
                          },
                          "low": {
                            "type": "number"
                          },
                          "close": {
                            "type": "number"
                          },
                          "volume": {
                            "type": "number"
                          },
                          "uaw": {
                            "type": "number"
                          },
                          "transactions": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "datetime",
                          "ticker",
                          "pool",
                          "open",
                          "high",
                          "low",
                          "close",
                          "volume",
                          "uaw",
                          "transactions"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "datetime": "2025-10-16 00:00:00",
                          "ticker": "USDCWETH",
                          "pool": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                          "open": 3986.8562193110524,
                          "high": 4067.092237083535,
                          "low": 3959.52075942394,
                          "close": 3989.7646037044765,
                          "volume": 32956701.586648002,
                          "uaw": 1363,
                          "transactions": 3066
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmPoolsOhlc",
        "tags": [
          "EVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "pool",
            "schema": {
              "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "description": "Filter by pool address",
              "type": "string"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "4h",
                "1d",
                "1w"
              ],
              "default": "1d",
              "description": "The interval for which to aggregate price data (hourly, 4-hours, daily or weekly)."
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Pool OHLCV Data",
        "description": "Returns OHLCV price data for liquidity pools.\n\nOHLCV historical depth is subject to plan restrictions.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/swaps": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "transaction_id": {
                            "type": "string"
                          },
                          "factory": {
                            "type": "string",
                            "description": "Filter by factory address",
                            "example": "0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f"
                          },
                          "pool": {
                            "description": "Filter by pool address",
                            "type": "string",
                            "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640"
                          },
                          "input_token": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter by address",
                                    "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "symbol": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "decimals": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "additionalProperties": false
                          },
                          "output_token": {
                            "type": "object",
                            "properties": {
                              "address": {
                                "anyOf": [
                                  {
                                    "type": "string",
                                    "description": "Filter by address",
                                    "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "symbol": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              },
                              "decimals": {
                                "anyOf": [
                                  {
                                    "type": "number"
                                  },
                                  {
                                    "type": "null"
                                  }
                                ]
                              }
                            },
                            "required": [
                              "address",
                              "symbol",
                              "decimals"
                            ],
                            "additionalProperties": false
                          },
                          "caller": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "sender": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "recipient": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "input_amount": {
                            "type": "string"
                          },
                          "input_value": {
                            "type": "number"
                          },
                          "output_amount": {
                            "type": "string"
                          },
                          "output_value": {
                            "type": "number"
                          },
                          "price": {
                            "type": "number"
                          },
                          "price_inv": {
                            "type": "number"
                          },
                          "protocol": {
                            "description": "Protocol name",
                            "example": "uniswap_v3",
                            "type": "string",
                            "enum": [
                              "uniswap_v2",
                              "uniswap_v3",
                              "uniswap_v4"
                            ]
                          },
                          "summary": {
                            "type": "string"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "transaction_id",
                          "factory",
                          "pool",
                          "input_token",
                          "output_token",
                          "caller",
                          "sender",
                          "recipient",
                          "input_amount",
                          "input_value",
                          "output_amount",
                          "output_value",
                          "price",
                          "price_inv",
                          "protocol",
                          "summary",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 23590326,
                          "datetime": "2025-10-16 12:48:47",
                          "timestamp": 1760618927,
                          "transaction_id": "0xf6374799c227c9db38ff5ac1d5bebe8b607a1de1238cd861ebd1053ec07305ca",
                          "factory": "0x1f98431c8ad98523631ae4a59f267346ea31f984",
                          "pool": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
                          "input_token": {
                            "address": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                            "symbol": "USDC",
                            "decimals": 6
                          },
                          "output_token": {
                            "address": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                            "symbol": "WETH",
                            "decimals": 18
                          },
                          "caller": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
                          "sender": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
                          "recipient": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
                          "input_amount": "40735537734",
                          "input_value": 40735.537734,
                          "output_amount": "10042247631260591234",
                          "output_value": 10.042247631260592,
                          "price": 246517483.4798306,
                          "price_inv": 4.0565074163667475e-9,
                          "protocol": "uniswap_v3",
                          "summary": "Swap 40.74 thousand USDC for 10.042247631260592 WETH on Uniswap V3",
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmSwaps",
        "tags": [
          "EVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string",
              "description": "Filter by transaction hash<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xf6374799c227c9db38ff5ac1d5bebe8b607a1de1238cd861ebd1053ec07305ca",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "pool",
            "schema": {
              "description": "Filter by pool address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "type": "string",
              "example": "0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "caller",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "sender",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "recipient",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xa69babef1ca67a37ffaf7a485dfff3382056e78c",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "protocol",
            "schema": {
              "description": "Protocol name",
              "example": "uniswap_v3",
              "default": "",
              "type": "string",
              "enum": [
                "uniswap_v2",
                "uniswap_v3",
                "uniswap_v4"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Swap Events",
        "description": "Returns DEX swap transactions from Uniswap protocols with token amounts and prices.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/tokens": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "circulating_supply": {
                            "type": "number"
                          },
                          "total_supply": {
                            "type": "number"
                          },
                          "holders": {
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          },
                          "icon": {
                            "type": "object",
                            "properties": {
                              "web3icon": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "web3icon"
                            ],
                            "additionalProperties": false
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "contract",
                          "name",
                          "symbol",
                          "decimals",
                          "circulating_supply",
                          "total_supply",
                          "holders",
                          "network",
                          "icon"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-16 09:24:47",
                          "last_update_block_num": 23589316,
                          "last_update_timestamp": 1760606687,
                          "contract": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
                          "name": "Wrapped Ether",
                          "symbol": "WETH",
                          "decimals": 18,
                          "circulating_supply": 2335108.0877502915,
                          "total_supply": 2335107.8841477665,
                          "holders": 3014993,
                          "network": "mainnet",
                          "icon": {
                            "web3icon": "ETH"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmTokens",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address",
              "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Metadata",
        "description": "Returns ERC-20 token metadata including supply and holder count.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/evm/transfers": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "transaction_id": {
                            "type": "string",
                            "description": "Filter by transaction hash",
                            "example": "0xf6374799c227c9db38ff5ac1d5bebe8b607a1de1238cd861ebd1053ec07305ca"
                          },
                          "contract": {
                            "type": "string",
                            "description": "Filter by contract address",
                            "example": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"
                          },
                          "from": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "to": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045"
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
                            "example": "mainnet",
                            "type": "string",
                            "enum": [
                              "arbitrum-one",
                              "avalanche",
                              "base",
                              "bsc",
                              "mainnet",
                              "optimism",
                              "polygon",
                              "unichain"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "transaction_id",
                          "contract",
                          "from",
                          "to",
                          "name",
                          "symbol",
                          "decimals",
                          "amount",
                          "value",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 23565775,
                          "datetime": "2025-10-13 02:19:47",
                          "timestamp": 1760321987,
                          "transaction_id": "0x96b1b180d22dae2b18a783ebdd5ae33f6867f3572f87c69a135c6c0a15a63c8e",
                          "log_index": 4404,
                          "contract": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                          "from": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                          "to": "0xdadb0d80178819f2319190d340ce9a924f783711",
                          "name": "Native",
                          "symbol": "ETH",
                          "decimals": 18,
                          "amount": "5038198000000",
                          "value": 0.000005038198,
                          "network": "mainnet"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1EvmTransfers",
        "tags": [
          "EVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for EVM networks https://thegraph.com/networks",
              "example": "mainnet",
              "type": "string",
              "enum": [
                "arbitrum-one",
                "avalanche",
                "base",
                "bsc",
                "mainnet",
                "optimism",
                "polygon",
                "unichain"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string",
              "description": "Filter by transaction hash<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0x96b1b180d22dae2b18a783ebdd5ae33f6867f3572f87c69a135c6c0a15a63c8e",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "contract",
            "schema": {
              "type": "string",
              "description": "Filter by contract address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "from_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "to_address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "0xdadb0d80178819f2319190d340ce9a924f783711",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Transfers",
        "description": "Returns ERC-20 and native token transfers with transaction and block data.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/balances/native": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "program_id": {
                            "description": "Filter by SPL token program ID",
                            "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                            "type": "string",
                            "enum": [
                              "11111111111111111111111111111111",
                              "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                              "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                            ]
                          },
                          "address": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "So11111111111111111111111111111111111111112"
                          },
                          "mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "uri": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "program_id",
                          "address",
                          "mint",
                          "amount",
                          "value",
                          "decimals",
                          "name",
                          "symbol",
                          "uri",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-16 08:20:15",
                          "last_update_block_num": 373711220,
                          "last_update_timestamp": 1760602815,
                          "program_id": "11111111111111111111111111111111",
                          "address": "So11111111111111111111111111111111111111112",
                          "mint": "So11111111111111111111111111111111111111111",
                          "amount": "1173096711863",
                          "value": 1173.096711863,
                          "decimals": 9,
                          "name": "SOL",
                          "symbol": "SOL",
                          "uri": null,
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmBalancesNative",
        "tags": [
          "SVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "address",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "So11111111111111111111111111111111111111112"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "include_null_balances",
            "schema": {
              "description": "Include zero/null balances in results",
              "default": false,
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Native Balances",
        "description": "Returns SOL native balances for wallet addresses.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/balances": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "program_id": {
                            "description": "Filter by SPL token program ID",
                            "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                            "type": "string",
                            "enum": [
                              "11111111111111111111111111111111",
                              "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                              "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                            ]
                          },
                          "owner": {
                            "type": "string",
                            "description": "Filter by owner address",
                            "example": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9"
                          },
                          "token_account": {
                            "type": "string",
                            "description": "Filter by token account address",
                            "example": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW"
                          },
                          "mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "uri": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "program_id",
                          "owner",
                          "token_account",
                          "mint",
                          "amount",
                          "value",
                          "decimals",
                          "name",
                          "symbol",
                          "uri",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-09 02:10:01",
                          "last_update_block_num": 372132067,
                          "last_update_timestamp": 1759975801,
                          "program_id": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                          "owner": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9",
                          "token_account": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW",
                          "mint": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn",
                          "amount": "85605114004",
                          "value": 85605.114004,
                          "decimals": 6,
                          "name": "Pump",
                          "symbol": "PUMP",
                          "uri": "https://ipfs.io/ipfs/bafkreibcglldkfdekdkxgumlveoe6qv3pbiceypkwtli33clbzul7leo4m",
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmBalances",
        "tags": [
          "SVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "owner",
            "schema": {
              "type": "string",
              "description": "Filter by owner address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "token_account",
            "schema": {
              "type": "string",
              "description": "Filter by token account address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "program_id",
            "schema": {
              "description": "Filter by SPL token program ID",
              "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
              "default": "",
              "type": "string",
              "enum": [
                "11111111111111111111111111111111",
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "include_null_balances",
            "schema": {
              "description": "Include zero/null balances in results",
              "default": false,
              "type": "boolean"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Balances",
        "description": "Returns SPL token balances for Solana token owners with mint and program data.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/dexes": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "program_id": {
                            "description": "Filter by program ID",
                            "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                            "type": "string",
                            "enum": [
                              "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                              "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P",
                              "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
                              "JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB",
                              "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
                            ]
                          },
                          "program_name": {
                            "type": "string"
                          },
                          "amm": {
                            "type": "string",
                            "description": "Filter by AMM address",
                            "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
                          },
                          "amm_name": {
                            "type": "string"
                          },
                          "is_aggregator": {
                            "type": "boolean"
                          },
                          "total_transactions": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "program_id",
                          "program_name",
                          "amm",
                          "amm_name",
                          "is_aggregator",
                          "total_transactions"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "program_id": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                          "program_name": "Jupiter Aggregator v6",
                          "amm": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                          "amm_name": "Raydium Liquidity Pool V4",
                          "is_aggregator": true,
                          "total_transactions": 1008573050
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmDexes",
        "tags": [
          "SVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "amm",
            "schema": {
              "type": "string",
              "description": "Filter by AMM address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "program_id",
            "schema": {
              "description": "Filter by program ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Supported DEXs",
        "description": "Returns supported Solana DEXs.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/owner": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "account": {
                            "type": "string",
                            "description": "Filter by token account address",
                            "example": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW"
                          },
                          "owner": {
                            "type": "string",
                            "description": "Filter by owner address",
                            "example": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9"
                          },
                          "is_closed": {
                            "type": "boolean"
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "account",
                          "owner",
                          "is_closed",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-07-14 17:17:19",
                          "last_update_block_num": 353288878,
                          "last_update_timestamp": 1752513439,
                          "account": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW",
                          "owner": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9",
                          "is_closed": false,
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmOwner",
        "tags": [
          "SVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "account",
            "schema": {
              "type": "string",
              "description": "Filter by token account address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Account Owner Lookup",
        "description": "Returns owner address of an associated token account (ATA) with closure status.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/pools/ohlc": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "amm": {
                            "type": "string",
                            "description": "Filter by AMM address",
                            "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
                          },
                          "amm_pool": {
                            "type": "string",
                            "description": "Filter by AMM pool address",
                            "example": "AmmpSnW5xVeKHTAU9fMjyKEMPgrzmUj3ah5vgvHhAB5J"
                          },
                          "token0": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "token0_decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "token1": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "token1_decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "open": {
                            "type": "number"
                          },
                          "high": {
                            "type": "number"
                          },
                          "low": {
                            "type": "number"
                          },
                          "close": {
                            "type": "number"
                          },
                          "volume": {
                            "type": "number"
                          },
                          "uaw": {
                            "type": "number"
                          },
                          "transactions": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "datetime",
                          "amm",
                          "amm_pool",
                          "token0",
                          "token0_decimals",
                          "token1",
                          "token1_decimals",
                          "open",
                          "high",
                          "low",
                          "close",
                          "volume",
                          "uaw",
                          "transactions"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "datetime": "2025-10-16 00:00:00",
                          "amm": "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
                          "amm_pool": "AmmpSnW5xVeKHTAU9fMjyKEMPgrzmUj3ah5vgvHhAB5J",
                          "token0": "9BB6NFEcjBCtnNLFko2FqVQBq8HHM13kCyYcdQbgpump",
                          "token0_decimals": 6,
                          "token1": "So11111111111111111111111111111111111111112",
                          "token1_decimals": 9,
                          "open": 0.0020385820805914096,
                          "high": 0.002037622484039942,
                          "low": 0.002029088299722426,
                          "close": 0.0020285665581652053,
                          "volume": 0.14567917800000002,
                          "uaw": 8,
                          "transactions": 8
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmPoolsOhlc",
        "tags": [
          "SVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "amm_pool",
            "schema": {
              "type": "string",
              "description": "Filter by AMM pool address",
              "example": "AmmpSnW5xVeKHTAU9fMjyKEMPgrzmUj3ah5vgvHhAB5J"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "interval",
            "schema": {
              "type": "string",
              "enum": [
                "1h",
                "4h",
                "1d",
                "1w"
              ],
              "default": "1d",
              "description": "The interval for which to aggregate price data (hourly, 4-hours, daily or weekly)."
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Pool OHLCV Data",
        "description": "Provides pricing data in the Open/High/Low/Close/Volume (OHCLV) format for DEX pools.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/pools": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "program_id": {
                            "description": "Filter by program ID",
                            "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                            "type": "string",
                            "enum": [
                              "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                              "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P",
                              "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
                              "JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB",
                              "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
                            ]
                          },
                          "program_name": {
                            "type": "string"
                          },
                          "amm": {
                            "type": "string",
                            "description": "Filter by AMM address",
                            "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
                          },
                          "amm_name": {
                            "type": "string"
                          },
                          "amm_pool": {
                            "type": "string",
                            "description": "Filter by AMM pool address",
                            "example": "AmmpSnW5xVeKHTAU9fMjyKEMPgrzmUj3ah5vgvHhAB5J"
                          },
                          "input_mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "output_mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "transactions": {
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "program_id",
                          "program_name",
                          "amm",
                          "amm_name",
                          "amm_pool",
                          "input_mint",
                          "output_mint",
                          "transactions",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "program_id": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                          "program_name": "Jupiter Aggregator v6",
                          "amm": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                          "amm_name": "Raydium Liquidity Pool V4",
                          "amm_pool": "",
                          "input_mint": "So11111111111111111111111111111111111111112",
                          "output_mint": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                          "transactions": 6583671,
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmPools",
        "tags": [
          "SVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "amm",
            "schema": {
              "type": "string",
              "description": "Filter by AMM address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "amm_pool",
            "schema": {
              "type": "string",
              "description": "Filter by AMM pool address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "input_mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "So11111111111111111111111111111111111111112",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "output_mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "program_id",
            "schema": {
              "description": "Filter by program ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Liquidity Pools",
        "description": "Returns AMM pool information from Solana DEX protocols with transaction counts.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/swaps": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "signature": {
                            "type": "string",
                            "description": "Filter by transaction signature",
                            "example": "5pdoVcSiSBr3LMAijdRYKrL5RoLFjLgHxHbZ34dUBVubnsQt3q1v48LuPazebsSiBVuSbSTyJdzf3G9jqqn8o6jA"
                          },
                          "transaction_index": {
                            "type": "number"
                          },
                          "instruction_index": {
                            "type": "number"
                          },
                          "program_id": {
                            "description": "Filter by program ID",
                            "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                            "type": "string",
                            "enum": [
                              "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                              "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P",
                              "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
                              "JUP4Fb2cqiRUcaTHdrPC8h2gNsA2ETXiPDD33WcGuJB",
                              "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4"
                            ]
                          },
                          "program_name": {
                            "type": "string"
                          },
                          "user": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "So11111111111111111111111111111111111111112"
                          },
                          "amm": {
                            "type": "string",
                            "description": "Filter by AMM address",
                            "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8"
                          },
                          "amm_name": {
                            "type": "string"
                          },
                          "amm_pool": {
                            "type": "string",
                            "description": "Filter by AMM pool address",
                            "example": "AmmpSnW5xVeKHTAU9fMjyKEMPgrzmUj3ah5vgvHhAB5J"
                          },
                          "input_mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "input_amount": {
                            "type": "number"
                          },
                          "output_mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "output_amount": {
                            "type": "number"
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "signature",
                          "transaction_index",
                          "instruction_index",
                          "program_id",
                          "program_name",
                          "user",
                          "amm",
                          "amm_name",
                          "amm_pool",
                          "input_mint",
                          "input_amount",
                          "output_mint",
                          "output_amount",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 373763118,
                          "datetime": "2025-10-16 14:03:09",
                          "timestamp": 1760623389,
                          "signature": "5pdoVcSiSBr3LMAijdRYKrL5RoLFjLgHxHbZ34dUBVubnsQt3q1v48LuPazebsSiBVuSbSTyJdzf3G9jqqn8o6jA",
                          "transaction_index": 8,
                          "instruction_index": 1,
                          "program_id": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
                          "program_name": "Jupiter Aggregator v6",
                          "amm": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
                          "amm_pool": "",
                          "user": "5MGfsuYNRhbuN6x1M6WaR3721dSDGtXpcsHxNsgkjsXC",
                          "input_mint": "HmrzeZapM1EygFc4tBJUXwWTzv5Ahy8axLSAadBx51sw",
                          "input_amount": 49572355581648,
                          "output_mint": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                          "output_amount": 936671,
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmSwaps",
        "tags": [
          "SVM DEXs"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "signature",
            "schema": {
              "type": "string",
              "description": "Filter by transaction signature<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "5pdoVcSiSBr3LMAijdRYKrL5RoLFjLgHxHbZ34dUBVubnsQt3q1v48LuPazebsSiBVuSbSTyJdzf3G9jqqn8o6jA",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "amm",
            "schema": {
              "type": "string",
              "description": "Filter by AMM address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "amm_pool",
            "schema": {
              "type": "string",
              "description": "Filter by AMM pool address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "user",
            "schema": {
              "type": "string",
              "description": "Filter by address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "5MGfsuYNRhbuN6x1M6WaR3721dSDGtXpcsHxNsgkjsXC",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "input_mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "HmrzeZapM1EygFc4tBJUXwWTzv5Ahy8axLSAadBx51sw",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "output_mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "program_id",
            "schema": {
              "description": "Filter by program ID<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Swap Events",
        "description": "Returns AMM swap events from Solana DEXs with input/output tokens and amounts.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/tokens": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "last_update": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "last_update_block_num": {
                            "type": "number"
                          },
                          "last_update_timestamp": {
                            "type": "number"
                          },
                          "program_id": {
                            "description": "Filter by SPL token program ID",
                            "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                            "type": "string",
                            "enum": [
                              "11111111111111111111111111111111",
                              "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                              "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                            ]
                          },
                          "mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "uri": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "last_update",
                          "last_update_block_num",
                          "last_update_timestamp",
                          "program_id",
                          "mint",
                          "decimals",
                          "name",
                          "symbol",
                          "uri",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "last_update": "2025-10-16 10:34:46",
                          "last_update_block_num": 373731565,
                          "last_update_timestamp": 1760610886,
                          "program_id": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                          "mint": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn",
                          "decimals": 6,
                          "name": "Pump",
                          "symbol": "PUMP",
                          "uri": "https://ipfs.io/ipfs/bafkreibcglldkfdekdkxgumlveoe6qv3pbiceypkwtli33clbzul7leo4m",
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmTokens",
        "tags": [
          "SVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address",
              "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
            },
            "required": true
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Metadata",
        "description": "Provides SVM token contract metadata.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/svm/transfers": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "block_num": {
                            "type": "number"
                          },
                          "datetime": {
                            "type": "string",
                            "format": "date-time",
                            "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                          },
                          "timestamp": {
                            "type": "number"
                          },
                          "signature": {
                            "type": "string"
                          },
                          "transaction_index": {
                            "type": "number"
                          },
                          "instruction_index": {
                            "type": "number"
                          },
                          "program_id": {
                            "description": "Filter by SPL token program ID",
                            "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                            "type": "string",
                            "enum": [
                              "11111111111111111111111111111111",
                              "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                              "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
                            ]
                          },
                          "mint": {
                            "type": "string",
                            "description": "Filter by mint address",
                            "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
                          },
                          "authority": {
                            "type": "string",
                            "description": "Filter by authority address",
                            "example": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9"
                          },
                          "source": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "So11111111111111111111111111111111111111112"
                          },
                          "destination": {
                            "type": "string",
                            "description": "Filter by address",
                            "example": "So11111111111111111111111111111111111111112"
                          },
                          "amount": {
                            "type": "string"
                          },
                          "value": {
                            "type": "number"
                          },
                          "decimals": {
                            "anyOf": [
                              {
                                "type": "number"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "name": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "symbol": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "uri": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "null"
                              }
                            ]
                          },
                          "network": {
                            "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
                            "example": "solana",
                            "type": "string",
                            "enum": [
                              "solana"
                            ]
                          }
                        },
                        "required": [
                          "block_num",
                          "datetime",
                          "timestamp",
                          "signature",
                          "transaction_index",
                          "instruction_index",
                          "program_id",
                          "mint",
                          "authority",
                          "source",
                          "destination",
                          "amount",
                          "value",
                          "decimals",
                          "name",
                          "symbol",
                          "uri",
                          "network"
                        ],
                        "additionalProperties": false
                      }
                    },
                    "statistics": {
                      "type": "object",
                      "properties": {
                        "elapsed": {
                          "type": "number"
                        },
                        "rows_read": {
                          "type": "number"
                        },
                        "bytes_read": {
                          "type": "number"
                        }
                      },
                      "additionalProperties": false
                    },
                    "pagination": {
                      "type": "object",
                      "properties": {
                        "previous_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        },
                        "current_page": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 9007199254740991
                        }
                      },
                      "required": [
                        "previous_page",
                        "current_page"
                      ],
                      "additionalProperties": false
                    },
                    "results": {
                      "type": "number"
                    },
                    "request_time": {
                      "type": "string"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "data",
                    "statistics",
                    "pagination",
                    "results",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "data": [
                        {
                          "block_num": 372132067,
                          "datetime": "2025-10-09 02:10:01",
                          "timestamp": 1759975801,
                          "signature": "2Y3YJMa7Gx96ZprnWxSQHiahGdbiNFwF1DdT4ZWGf8cwJnv4fRTcFg9Z5THuAHhja66fi6Jd8fLngtH1d8qSNj3H",
                          "transaction_index": 65,
                          "instruction_index": 0,
                          "program_id": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                          "mint": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn",
                          "authority": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9",
                          "source": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW",
                          "destination": "64nnJ2CBUZ3VasttjVhxbQXqzbjAxnj4VT4vBrrveNV",
                          "amount": "835996345",
                          "value": 835.996345,
                          "decimals": 6,
                          "name": "Pump",
                          "symbol": "PUMP",
                          "uri": "https://ipfs.io/ipfs/bafkreibcglldkfdekdkxgumlveoe6qv3pbiceypkwtli33clbzul7leo4m",
                          "network": "solana"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1SvmTransfers",
        "tags": [
          "SVM Tokens"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "network",
            "schema": {
              "description": "The Graph Network ID for SVM networks https://thegraph.com/networks",
              "example": "solana",
              "type": "string",
              "enum": [
                "solana"
              ]
            },
            "required": true
          },
          {
            "in": "query",
            "name": "signature",
            "schema": {
              "type": "string",
              "description": "Filter by transaction signature<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "2Y3YJMa7Gx96ZprnWxSQHiahGdbiNFwF1DdT4ZWGf8cwJnv4fRTcFg9Z5THuAHhja66fi6Jd8fLngtH1d8qSNj3H",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "source",
            "schema": {
              "type": "string",
              "description": "Filter by token account address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "5UZfa66rzeDpD9wKs3Sn3iewmavxYvpAtiF2Lqd2n1wW",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "destination",
            "schema": {
              "type": "string",
              "description": "Filter by token account address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "64nnJ2CBUZ3VasttjVhxbQXqzbjAxnj4VT4vBrrveNV",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "authority",
            "schema": {
              "type": "string",
              "description": "Filter by authority address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "GXYBNgyYKbSLr938VJCpmGLCUaAHWsncTi7jDoQSdFR9",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "mint",
            "schema": {
              "type": "string",
              "description": "Filter by mint address<br>Single value or array of values* (separate multiple values with `,`)<br>*Plan restricted.",
              "example": "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn",
              "default": ""
            },
            "required": false
          },
          {
            "in": "query",
            "name": "program_id",
            "schema": {
              "description": "Filter by SPL token program ID",
              "example": "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
              "default": "",
              "type": "string",
              "enum": [
                "11111111111111111111111111111111",
                "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb",
                "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
              ]
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": "2025-01-01"
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_time",
            "schema": {
              "type": "string",
              "description": "UNIX timestamp in seconds or date string (e.g. \"2025-01-01T00:00:00Z\", \"2025-01-01\", ...).",
              "default": 9999999999
            },
            "required": false
          },
          {
            "in": "query",
            "name": "start_block",
            "schema": {
              "description": "Filter by block number",
              "default": 0,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "end_block",
            "schema": {
              "description": "Filter by block number",
              "default": 9999999999,
              "type": "integer",
              "minimum": 0,
              "maximum": 9007199254740991
            },
            "required": false
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Number of items* returned in a single request.<br>*Plan restricted.",
              "default": 10,
              "type": "integer",
              "minimum": 1,
              "maximum": 1000
            },
            "required": false
          },
          {
            "in": "query",
            "name": "page",
            "schema": {
              "description": "Page number to fetch.<br>Empty `data` array signifies end of results.",
              "default": 1,
              "type": "integer",
              "minimum": 1,
              "maximum": 767465558638
            },
            "required": false
          }
        ],
        "summary": "Token Transfers",
        "description": "Returns SPL token transfers with program, authority, and account information.",
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/v1/health": {
      "get": {
        "responses": {
          "200": {
            "description": "API is healthy or degraded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "degraded",
                        "unhealthy"
                      ]
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": [
                            "up",
                            "down",
                            "slow"
                          ]
                        },
                        "api_endpoints": {
                          "type": "string",
                          "enum": [
                            "up",
                            "down",
                            "partial",
                            "skipped"
                          ]
                        }
                      },
                      "required": [
                        "database",
                        "api_endpoints"
                      ],
                      "additionalProperties": false
                    },
                    "request_time": {
                      "type": "string",
                      "format": "date-time",
                      "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "status",
                    "checks",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "healthy": {
                    "summary": "Healthy API",
                    "value": {
                      "status": "healthy",
                      "checks": {
                        "database": "up",
                        "api_endpoints": "up"
                      },
                      "request_time": "2025-08-06 12:00:00",
                      "duration_ms": 1250
                    }
                  },
                  "degraded": {
                    "summary": "Degraded API",
                    "value": {
                      "status": "degraded",
                      "checks": {
                        "database": "slow",
                        "api_endpoints": "partial"
                      },
                      "request_time": "2025-08-06 12:00:00",
                      "duration_ms": 3400
                    }
                  },
                  "skipped": {
                    "summary": "Database-only check",
                    "value": {
                      "status": "healthy",
                      "checks": {
                        "database": "up",
                        "api_endpoints": "skipped"
                      },
                      "request_time": "2025-08-06 12:00:00",
                      "duration_ms": 125
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "API is unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "healthy",
                        "degraded",
                        "unhealthy"
                      ]
                    },
                    "checks": {
                      "type": "object",
                      "properties": {
                        "database": {
                          "type": "string",
                          "enum": [
                            "up",
                            "down",
                            "slow"
                          ]
                        },
                        "api_endpoints": {
                          "type": "string",
                          "enum": [
                            "up",
                            "down",
                            "partial",
                            "skipped"
                          ]
                        }
                      },
                      "required": [
                        "database",
                        "api_endpoints"
                      ],
                      "additionalProperties": false
                    },
                    "request_time": {
                      "type": "string",
                      "format": "date-time",
                      "pattern": "^(?:(?:\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-(?:(?:0[13578]|1[02])-(?:0[1-9]|[12]\\d|3[01])|(?:0[469]|11)-(?:0[1-9]|[12]\\d|30)|(?:02)-(?:0[1-9]|1\\d|2[0-8])))T(?:(?:[01]\\d|2[0-3]):[0-5]\\d(?::[0-5]\\d(?:\\.\\d+)?)?(?:Z))$"
                    },
                    "duration_ms": {
                      "type": "number"
                    }
                  },
                  "required": [
                    "status",
                    "checks",
                    "request_time",
                    "duration_ms"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "unhealthy": {
                    "summary": "Unhealthy API",
                    "value": {
                      "status": "unhealthy",
                      "checks": {
                        "database": "down",
                        "api_endpoints": "down"
                      },
                      "request_time": "2025-08-06 12:00:00",
                      "duration_ms": 5000
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1Health",
        "tags": [
          "Monitoring"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "skip_endpoints",
            "schema": {
              "default": true,
              "type": "boolean"
            }
          }
        ],
        "summary": "Health Check",
        "description": "Returns API operational status and dependency health with optional endpoint testing.\n\nUse `skip_endpoints` to bypass endpoint responses checks."
      }
    },
    "/v1/version": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "version": {
                      "type": "string"
                    },
                    "date": {
                      "type": "string"
                    },
                    "commit": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "version",
                    "date",
                    "commit"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "version": "3.1.0",
                      "commit": "a61c748",
                      "date": "2025-10-16",
                      "repo": "pinax-network/token-api"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1Version",
        "tags": [
          "Monitoring"
        ],
        "parameters": [],
        "summary": "API Version Info",
        "description": "Returns API version, build date, and commit information."
      }
    },
    "/v1/networks": {
      "get": {
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "networks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "fullName": {
                            "type": "string"
                          },
                          "shortName": {
                            "type": "string"
                          },
                          "caip2Id": {
                            "type": "string"
                          },
                          "networkType": {
                            "type": "string"
                          },
                          "icon": {
                            "type": "object",
                            "properties": {
                              "web3Icons": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "name"
                                ],
                                "additionalProperties": false
                              }
                            },
                            "required": [
                              "web3Icons"
                            ],
                            "additionalProperties": false
                          },
                          "alias": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "id",
                          "fullName",
                          "shortName",
                          "caip2Id",
                          "networkType",
                          "icon",
                          "alias"
                        ],
                        "additionalProperties": false
                      }
                    }
                  },
                  "required": [
                    "networks"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "networks": [
                        {
                          "id": "mainnet",
                          "fullName": "Ethereum Mainnet",
                          "shortName": "Ethereum",
                          "networkType": "mainnet",
                          "nativeToken": "ETH",
                          "caip2Id": "eip155:1",
                          "icon": {
                            "web3Icons": {
                              "name": "ethereum"
                            }
                          },
                          "aliases": [
                            "ethereum",
                            "eth",
                            "eth-mainnet",
                            "evm-1"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Client side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 400,
                      "code": "bad_query_input",
                      "message": "Invalid query parameter provided"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 401,
                      "code": "unauthorized",
                      "message": "Authentication required"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 403,
                      "code": "forbidden",
                      "message": "Access denied"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 400
                        },
                        {
                          "type": "number",
                          "const": 401
                        },
                        {
                          "type": "number",
                          "const": 403
                        },
                        {
                          "type": "number",
                          "const": 404
                        },
                        {
                          "type": "number",
                          "const": 405
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "authentication_failed",
                        "bad_header",
                        "missing_required_header",
                        "bad_query_input",
                        "forbidden",
                        "method_not_allowed",
                        "route_not_found",
                        "unauthorized",
                        "not_found_data"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 404,
                      "code": "not_found_data",
                      "message": "Resource not found"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server side error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 500
                        },
                        {
                          "type": "number",
                          "const": 502
                        },
                        {
                          "type": "number",
                          "const": 504
                        }
                      ]
                    },
                    "code": {
                      "type": "string",
                      "enum": [
                        "bad_database_response",
                        "connection_refused",
                        "database_timeout",
                        "internal_server_error"
                      ]
                    },
                    "message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "status",
                    "code",
                    "message"
                  ],
                  "additionalProperties": false
                },
                "examples": {
                  "example": {
                    "value": {
                      "status": 500,
                      "code": "internal_server_error",
                      "message": "An unexpected error occurred"
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "getV1Networks",
        "tags": [
          "Monitoring"
        ],
        "parameters": [],
        "summary": "Supported Networks",
        "description": "Returns supported blockchain networks with identifiers and metadata."
      }
    }
  }
}